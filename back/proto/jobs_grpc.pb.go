// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: jobs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUserByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*User, error)
	GetAllUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error)
	SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*Result, error)
	GetOrCreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error)
	GetOrCreateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error)
	GetAllCities(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Cities, error)
	CreateSkill(ctx context.Context, in *Skill, opts ...grpc.CallOption) (*Skill, error)
	GetAllSkills(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Skill, error)
	CreateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error)
	GetAllProfessions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Professions, error)
	CreateCV(ctx context.Context, in *CV, opts ...grpc.CallOption) (*CV, error)
	UpdateCV(ctx context.Context, in *CV, opts ...grpc.CallOption) (*CV, error)
	GetAllCVs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CVs, error)
	GetCVByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CV, error)
	CreateAd(ctx context.Context, in *Ad, opts ...grpc.CallOption) (*Ad, error)
	GetAllAds(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Ads, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.API/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetUserByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.API/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/user.API/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/user.API/SetPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetOrCreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user.API/GetOrCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/user.API/CreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetOrCreateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/user.API/GetOrCreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllCities(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Cities, error) {
	out := new(Cities)
	err := c.cc.Invoke(ctx, "/user.API/GetAllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateSkill(ctx context.Context, in *Skill, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, "/user.API/CreateSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllSkills(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Skill, error) {
	out := new(Skill)
	err := c.cc.Invoke(ctx, "/user.API/GetAllSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateProfession(ctx context.Context, in *Profession, opts ...grpc.CallOption) (*Profession, error) {
	out := new(Profession)
	err := c.cc.Invoke(ctx, "/user.API/CreateProfession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllProfessions(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Professions, error) {
	out := new(Professions)
	err := c.cc.Invoke(ctx, "/user.API/GetAllProfessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateCV(ctx context.Context, in *CV, opts ...grpc.CallOption) (*CV, error) {
	out := new(CV)
	err := c.cc.Invoke(ctx, "/user.API/CreateCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateCV(ctx context.Context, in *CV, opts ...grpc.CallOption) (*CV, error) {
	out := new(CV)
	err := c.cc.Invoke(ctx, "/user.API/UpdateCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllCVs(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*CVs, error) {
	out := new(CVs)
	err := c.cc.Invoke(ctx, "/user.API/GetAllCVs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCVByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*CV, error) {
	out := new(CV)
	err := c.cc.Invoke(ctx, "/user.API/GetCVByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateAd(ctx context.Context, in *Ad, opts ...grpc.CallOption) (*Ad, error) {
	out := new(Ad)
	err := c.cc.Invoke(ctx, "/user.API/CreateAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAllAds(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Ads, error) {
	out := new(Ads)
	err := c.cc.Invoke(ctx, "/user.API/GetAllAds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	CreateUser(context.Context, *User) (*User, error)
	GetUserByID(context.Context, *IDRequest) (*User, error)
	GetAllUsers(context.Context, *User) (*Users, error)
	SetPhone(context.Context, *SetPhoneRequest) (*Result, error)
	GetOrCreateUser(context.Context, *User) (*User, error)
	CreateCity(context.Context, *City) (*City, error)
	GetOrCreateCity(context.Context, *City) (*City, error)
	GetAllCities(context.Context, *EmptyRequest) (*Cities, error)
	CreateSkill(context.Context, *Skill) (*Skill, error)
	GetAllSkills(context.Context, *EmptyRequest) (*Skill, error)
	CreateProfession(context.Context, *Profession) (*Profession, error)
	GetAllProfessions(context.Context, *EmptyRequest) (*Professions, error)
	CreateCV(context.Context, *CV) (*CV, error)
	UpdateCV(context.Context, *CV) (*CV, error)
	GetAllCVs(context.Context, *EmptyRequest) (*CVs, error)
	GetCVByID(context.Context, *IDRequest) (*CV, error)
	CreateAd(context.Context, *Ad) (*Ad, error)
	GetAllAds(context.Context, *EmptyRequest) (*Ads, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAPIServer) GetUserByID(context.Context, *IDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedAPIServer) GetAllUsers(context.Context, *User) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedAPIServer) SetPhone(context.Context, *SetPhoneRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhone not implemented")
}
func (UnimplementedAPIServer) GetOrCreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateUser not implemented")
}
func (UnimplementedAPIServer) CreateCity(context.Context, *City) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedAPIServer) GetOrCreateCity(context.Context, *City) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateCity not implemented")
}
func (UnimplementedAPIServer) GetAllCities(context.Context, *EmptyRequest) (*Cities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCities not implemented")
}
func (UnimplementedAPIServer) CreateSkill(context.Context, *Skill) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkill not implemented")
}
func (UnimplementedAPIServer) GetAllSkills(context.Context, *EmptyRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSkills not implemented")
}
func (UnimplementedAPIServer) CreateProfession(context.Context, *Profession) (*Profession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfession not implemented")
}
func (UnimplementedAPIServer) GetAllProfessions(context.Context, *EmptyRequest) (*Professions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfessions not implemented")
}
func (UnimplementedAPIServer) CreateCV(context.Context, *CV) (*CV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCV not implemented")
}
func (UnimplementedAPIServer) UpdateCV(context.Context, *CV) (*CV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCV not implemented")
}
func (UnimplementedAPIServer) GetAllCVs(context.Context, *EmptyRequest) (*CVs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCVs not implemented")
}
func (UnimplementedAPIServer) GetCVByID(context.Context, *IDRequest) (*CV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCVByID not implemented")
}
func (UnimplementedAPIServer) CreateAd(context.Context, *Ad) (*Ad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAd not implemented")
}
func (UnimplementedAPIServer) GetAllAds(context.Context, *EmptyRequest) (*Ads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAds not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetUserByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllUsers(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/SetPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetPhone(ctx, req.(*SetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetOrCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetOrCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetOrCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetOrCreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(City)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCity(ctx, req.(*City))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetOrCreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(City)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetOrCreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetOrCreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetOrCreateCity(ctx, req.(*City))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllCities(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateSkill(ctx, req.(*Skill))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllSkills(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateProfession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateProfession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateProfession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateProfession(ctx, req.(*Profession))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllProfessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllProfessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllProfessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllProfessions(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCV(ctx, req.(*CV))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/UpdateCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateCV(ctx, req.(*CV))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllCVs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllCVs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllCVs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllCVs(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCVByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCVByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetCVByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCVByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/CreateAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateAd(ctx, req.(*Ad))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetAllAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.API/GetAllAds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllAds(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _API_CreateUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _API_GetUserByID_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _API_GetAllUsers_Handler,
		},
		{
			MethodName: "SetPhone",
			Handler:    _API_SetPhone_Handler,
		},
		{
			MethodName: "GetOrCreateUser",
			Handler:    _API_GetOrCreateUser_Handler,
		},
		{
			MethodName: "CreateCity",
			Handler:    _API_CreateCity_Handler,
		},
		{
			MethodName: "GetOrCreateCity",
			Handler:    _API_GetOrCreateCity_Handler,
		},
		{
			MethodName: "GetAllCities",
			Handler:    _API_GetAllCities_Handler,
		},
		{
			MethodName: "CreateSkill",
			Handler:    _API_CreateSkill_Handler,
		},
		{
			MethodName: "GetAllSkills",
			Handler:    _API_GetAllSkills_Handler,
		},
		{
			MethodName: "CreateProfession",
			Handler:    _API_CreateProfession_Handler,
		},
		{
			MethodName: "GetAllProfessions",
			Handler:    _API_GetAllProfessions_Handler,
		},
		{
			MethodName: "CreateCV",
			Handler:    _API_CreateCV_Handler,
		},
		{
			MethodName: "UpdateCV",
			Handler:    _API_UpdateCV_Handler,
		},
		{
			MethodName: "GetAllCVs",
			Handler:    _API_GetAllCVs_Handler,
		},
		{
			MethodName: "GetCVByID",
			Handler:    _API_GetCVByID_Handler,
		},
		{
			MethodName: "CreateAd",
			Handler:    _API_CreateAd_Handler,
		},
		{
			MethodName: "GetAllAds",
			Handler:    _API_GetAllAds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jobs.proto",
}
